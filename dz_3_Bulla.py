# Задайте список из нескольких чисел. Напишите программу, 
# которая найдёт сумму элементов списка, стоящих на нечётной идексах.

# Пример:

# [2, 3, 5, 9, 3] -> на нечётных идексах элементы 3 и 9, ответ: 12
# spisok = [2, 3, 5, 9, 3]
# def my_sum(s):
#     sum_ = 0
#     for i in range(1, len(s), 2):
#         sum_ += s[i]
#     return sum_
# print(my_sum(spisok))





# Напишите программу, которая найдёт произведение пар чисел списка. Парой считаем первый и последний элемент, второй и предпоследний и т.д.

# Пример:

# - [2, 3, 4, 5, 6] => [12, 15, 16];
# - [2, 3, 5, 6] => [12, 15]
# import math
# spisok = [2, 3, 4, 5, 6]
# def my_proizv(s):
#     proizv_ = []
#     for i in range(0, math.ceil(len(s)/2)):
#         proizv_.append(s[i] * s[-i-1])
#     return proizv_

# print(my_proizv(spisok))





# Задайте список из вещественных чисел. Напишите программу, 
# которая найдёт разницу между максимальным и минимальным значением дробной части элементов.

# Пример:

# - [1.1, 1.2, 3.1, 10.01] => 0.19

# spisok3 = [1.1, 1.2, 3.1, 10.01]

# def my_function(s):
#     help = []
#     for i in spisok3:   
#         help.append(float('0.'+ str(i).split('.')[1]))
#     help.sort()
#     r = help[len(help)-1]-help[0]
#     return r

# print(my_function(spisok3))



# Напишите программу, которая будет преобразовывать десятичное число в двоичное.

# Пример:

# - 45 -> 101101
# - 3 -> 11
# - 2 -> 10

# number = int(input('Введите число: '))
# def bin_(n):
#     b = ''
#     while n > 0:
#         b = str(n % 2) + b
#         n = n // 2
#     return b

# print(bin_(number))



# Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.

# Пример:

# - для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]

# number = int(input('Введите число: '))

# def fib(n):
#     if n in [1, 2]:
#         return 1
#     else:
#         return fib(n-1) + fib(n-2)

# list = [0]
# for i in range(1, number+1):
#     list.append(fib(i))
#     list.insert(0,-fib(i))

# print(list)